name: CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        image_repo: ["containers", "containers_15_2", "containers_sle-15-sp2"]
        compiler: [gcc, clang]
        buildtype: [debug, debugoptimized, release]
        checker: [off, address, valgrind, undefined]
    container:
      image: "registry.opensuse.org/home/dancermak/${{ matrix.image_repo }}/phoebe:latest"

    steps:
    - uses: actions/checkout@v1

    - name: configure
      run: meson -Dprint_advanced_messages=true -Dprint_table=true -Dcheck_initial_settings=true -Dcollector=enabled -Dbuildtype=${{ matrix.buildtype }} -Db_sanitize=${{ matrix.checker }} build
      if: ${{ (matrix.checker == 'address') || (matrix.checker == 'undefined') }}
      env:
        CC: ${{ matrix.compiler }}

    - name: configure
      run: meson -Dprint_advanced_messages=true -Dprint_table=true -Dcheck_initial_settings=true -Dcollector=enabled -Dbuildtype=${{ matrix.buildtype }} build
      if: ${{ (matrix.checker != 'address') && (matrix.checker != 'undefined') }}
      env:
        CC: ${{ matrix.compiler }}

    - name: build
      run: meson compile
      working-directory: ./build

    - name: test (with valgrind)
      run: meson test --wrap=valgrind || (cat meson-logs/testlog-valgrind.txt && exit 1)
      working-directory: ./build
      if: ${{ matrix.checker == 'valgrind' }}

    - name: test
      run: meson test || (cat meson-logs/testlog.txt && exit 1)
      working-directory: ./build
      if: ${{ matrix.checker != 'valgrind' }}

    - name: install
      run: |
        set -euox pipefail
        mkdir destdir
        DESTDIR=./destdir meson install
        [ -e destdir/usr/local/etc/phoebe/settings.json ]
        [ -e destdir/usr/local/share/phoebe/rates.csv ]
        [ -e destdir/usr/local/bin/phoebe ]
        [ -e destdir/usr/local/bin/data_tool ]
        [ -e destdir/usr/local/lib64/phoebe/libnetwork_plugin.so ]
      working-directory: ./build
      if: ${{ matrix.checker == 'off' }}

    - name: upload build directory
      uses: 'actions/upload-artifact@v2'
      if: ${{ always() }}
      with:
        name: build-dir ${{ matrix.compiler }}-${{ matrix.buildtype }}-${{ matrix.checker }}-${{ matrix.image_repo }}
        path: ./build


  lint:
    runs-on: ubuntu-latest

    container:
      image: "registry.opensuse.org/home/dancermak/containers/phoebe:latest"

    steps:
    - uses: actions/checkout@v1

    - name: configure
      run: meson -Dprint_advanced_messages=true -Dprint_table=true -Dcheck_initial_settings=true build

    - name: lint
      run: ninja clang-tidy
      working-directory: ./build

    - name: format
      run: |
        ninja clang-format
        git diff --exit-code
      working-directory: ./build
