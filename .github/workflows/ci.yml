name: CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        image_repo: ["containers", "containers_15_2", "containers_sle-15-sp2"]
        compiler: [gcc, clang]
        buildtype: [debug, debugoptimized, release]
        checker: [off, address, valgrind, undefined]
    container:
      image: "registry.opensuse.org/home/dancermak/${{ matrix.image_repo }}/phoebe:latest"

    steps:
    - uses: actions/checkout@v1

    - name: configure
      run: meson -Dprint_advanced_messages=true -Dprint_table=true -Dcheck_initial_settings=true -Dcollector=enabled -Dbuildtype=${{ matrix.buildtype }} -Db_sanitize=${{ matrix.checker }} build
      if: ${{ (matrix.checker == 'address') || (matrix.checker == 'undefined') }}
      env:
        CC: ${{ matrix.compiler }}

    - name: configure
      run: meson -Dprint_advanced_messages=true -Dprint_table=true -Dcheck_initial_settings=true -Dcollector=enabled -Dbuildtype=${{ matrix.buildtype }} build
      if: ${{ (matrix.checker != 'address') && (matrix.checker != 'undefined') }}
      env:
        CC: ${{ matrix.compiler }}

    - name: build
      run: meson compile
      working-directory: ./build

    - name: test (with valgrind)
      run: meson test --wrap=valgrind || (cat meson-logs/testlog-valgrind.txt && exit 1)
      working-directory: ./build
      if: ${{ matrix.checker == 'valgrind' }}

    - name: test
      run: meson test || (cat meson-logs/testlog.txt && exit 1)
      working-directory: ./build
      if: ${{ matrix.checker != 'valgrind' }}

    - name: install
      run: |
        set -euox pipefail
        mkdir destdir
        DESTDIR=./destdir meson install
        [ -e destdir/usr/local/etc/phoebe/settings.json ]
        [ -e destdir/usr/local/share/phoebe/rates.csv ]
        [ -e destdir/usr/local/bin/phoebe ]
        [ -e destdir/usr/local/bin/data_tool ]
        [ -e destdir/usr/local/lib64/phoebe/libnetwork_plugin.so ]
      working-directory: ./build
      if: ${{ matrix.checker == 'off' }}

    - name: upload build directory
      uses: 'actions/upload-artifact@v2'
      if: ${{ always() }}
      with:
        name: build-dir ${{ matrix.compiler }}-${{ matrix.buildtype }}-${{ matrix.checker }}-${{ matrix.image_repo }}
        path: ./build


  lint:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        print_advanced_messages: [true, false]
        print_table: [true, false]
        check_initial_settings: [true, false]
    container:
      image: "registry.opensuse.org/home/dancermak/containers/phoebe:latest"

    steps:
    - uses: actions/checkout@v1

    - name: configure for clang
      run: meson -Dprint_advanced_messages=${{ matrix.print_advanced_messages }} -Dprint_table=${{ matrix.print_table }} -Dcheck_initial_settings=${{ matrix.check_initial_settings }} -Dcollector=enabled -Dbuildtype=release build_clang
      env:
        CC: clang

    - name: lint with clang tidy
      run: ninja clang-tidy
      working-directory: ./build_clang

    - name: configure for gcc
      run: meson -Dprint_advanced_messages=${{ matrix.print_advanced_messages }} -Dprint_table=${{ matrix.print_table }} -Dcheck_initial_settings=${{ matrix.check_initial_settings }} -Dcollector=enabled -Dbuildtype=release -Dwerror=true build_gcc
      env:
        CC: gcc
        CFLAGS: -fanalyzer

    - name: lint with gcc's -fanalyzer
      run: meson compile -C ./build_clang

  format:
    runs-on: ubuntu-latest

    container:
      image: "registry.opensuse.org/home/dancermak/containers/phoebe:latest"

    steps:
    - uses: actions/checkout@v1

    - name: configure for clang
      run: meson build_clang
      env:
        CC: clang

    - name: run clang-format
      run: |
        ninja clang-format
        git diff --exit-code
      working-directory: ./build_clang

  infer:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    container:
      image: docker.io/library/ubuntu:20.04

    steps:
    - uses: actions/checkout@v1

    - name: install dependencies
      run: |
        apt update
        apt install -y curl xz-utils clang ninja-build python3-pip pkg-config libnl-3-dev libnl-nf-3-dev libjson-c-dev tzdata libncurses5 jq bash
        pip3 install meson
      env:
        DEBIAN_FRONTEND: noninteractive

    - name: download and install infer
      run: |
        curl -sSL "https://github.com/facebook/infer/releases/download/v$VERSION/infer-linux64-v$VERSION.tar.xz" | tar -C /opt -xJ
        ln -s "/opt/infer-linux64-v$VERSION/bin/infer" /usr/local/bin/infer
      env:
        VERSION: 1.0.0

    - name: configure for clang
      run: /usr/local/bin/meson -Dprint_advanced_messages=true -Dprint_table=true -Dcheck_initial_settings=true -Dbuildtype=release build_clang
      env:
        CC: clang

    - name: run infer
      run: |
        infer capture --compilation-database build_clang/compile_commands.json
        infer analyze

    - name: fail if there are issues present
      run: |
        if [[ $(jq length ./infer-out/report.json) -ne 0 ]]; then
            cat ./infer-out/report.txt
            exit 1
        fi

    - name: upload infer report
      uses: 'actions/upload-artifact@v2'
      if: ${{ always() }}
      with:
        name: infer-out
        path: ./infer-out
